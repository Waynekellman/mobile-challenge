// Generated by Dagger (https://google.github.io/dagger).
package nyc.c4q.vice.mobile.presenters;

import dagger.internal.Factory;
import javax.inject.Provider;
import nyc.c4q.vice.mobile.ResourceManager;

public final class MainPresenter_Factory implements Factory<MainPresenter> {
  private final Provider<ResourceManager> resourceManagerProvider;

  public MainPresenter_Factory(Provider<ResourceManager> resourceManagerProvider) {
    this.resourceManagerProvider = resourceManagerProvider;
  }

  @Override
  public MainPresenter get() {
    return provideInstance(resourceManagerProvider);
  }

  public static MainPresenter provideInstance(Provider<ResourceManager> resourceManagerProvider) {
    return new MainPresenter(resourceManagerProvider.get());
  }

  public static MainPresenter_Factory create(Provider<ResourceManager> resourceManagerProvider) {
    return new MainPresenter_Factory(resourceManagerProvider);
  }

  public static MainPresenter newMainPresenter(ResourceManager resourceManager) {
    return new MainPresenter(resourceManager);
  }
}
