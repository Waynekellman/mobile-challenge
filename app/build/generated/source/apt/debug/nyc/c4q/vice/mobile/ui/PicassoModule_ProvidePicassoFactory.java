// Generated by Dagger (https://google.github.io/dagger).
package nyc.c4q.vice.mobile.ui;

import android.content.Context;
import com.squareup.picasso.Picasso;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class PicassoModule_ProvidePicassoFactory implements Factory<Picasso> {
  private final PicassoModule module;

  private final Provider<Context> contextProvider;

  private final Provider<OkHttpClient> clientProvider;

  public PicassoModule_ProvidePicassoFactory(
      PicassoModule module,
      Provider<Context> contextProvider,
      Provider<OkHttpClient> clientProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public Picasso get() {
    return provideInstance(module, contextProvider, clientProvider);
  }

  public static Picasso provideInstance(
      PicassoModule module,
      Provider<Context> contextProvider,
      Provider<OkHttpClient> clientProvider) {
    return proxyProvidePicasso(module, contextProvider.get(), clientProvider.get());
  }

  public static PicassoModule_ProvidePicassoFactory create(
      PicassoModule module,
      Provider<Context> contextProvider,
      Provider<OkHttpClient> clientProvider) {
    return new PicassoModule_ProvidePicassoFactory(module, contextProvider, clientProvider);
  }

  public static Picasso proxyProvidePicasso(
      PicassoModule instance, Context context, OkHttpClient client) {
    return Preconditions.checkNotNull(
        instance.providePicasso(context, client),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
