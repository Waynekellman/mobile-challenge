// Generated by Dagger (https://google.github.io/dagger).
package nyc.c4q.vice.mobile;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AndroidModule_ProvideResourceManagerFactory implements Factory<ResourceManager> {
  private final AndroidModule module;

  private final Provider<Context> contextProvider;

  public AndroidModule_ProvideResourceManagerFactory(
      AndroidModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public ResourceManager get() {
    return provideInstance(module, contextProvider);
  }

  public static ResourceManager provideInstance(
      AndroidModule module, Provider<Context> contextProvider) {
    return proxyProvideResourceManager(module, contextProvider.get());
  }

  public static AndroidModule_ProvideResourceManagerFactory create(
      AndroidModule module, Provider<Context> contextProvider) {
    return new AndroidModule_ProvideResourceManagerFactory(module, contextProvider);
  }

  public static ResourceManager proxyProvideResourceManager(
      AndroidModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.provideResourceManager(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
