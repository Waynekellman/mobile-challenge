// Generated by Dagger (https://google.github.io/dagger).
package nyc.c4q.vice.mobile.db;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DatabaseModule_ProvideDatabaseHelperFactory
    implements Factory<FavoritesDatabaseHelper> {
  private final DatabaseModule module;

  private final Provider<Context> contextProvider;

  public DatabaseModule_ProvideDatabaseHelperFactory(
      DatabaseModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public FavoritesDatabaseHelper get() {
    return provideInstance(module, contextProvider);
  }

  public static FavoritesDatabaseHelper provideInstance(
      DatabaseModule module, Provider<Context> contextProvider) {
    return proxyProvideDatabaseHelper(module, contextProvider.get());
  }

  public static DatabaseModule_ProvideDatabaseHelperFactory create(
      DatabaseModule module, Provider<Context> contextProvider) {
    return new DatabaseModule_ProvideDatabaseHelperFactory(module, contextProvider);
  }

  public static FavoritesDatabaseHelper proxyProvideDatabaseHelper(
      DatabaseModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.provideDatabaseHelper(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
